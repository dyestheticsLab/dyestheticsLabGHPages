"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([["931"],{2401:function(e,n,i){i.r(n),i.d(n,{default:()=>c});var s=i(1549),a=i(6603),r=i(4453);function t(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",code:"code",strong:"strong",div:"div",pre:"pre",h3:"h3"},(0,a.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"tailwind-manifest-creators",children:["Tailwind Manifest Creators",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#tailwind-manifest-creators",children:"#"})]}),"\n",(0,s.jsxs)(n.h2,{id:"introduction",children:["Introduction",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#introduction",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"@dyesthetics-lab/tailwind-manifest-creators"})," package creates manifest files containing all Tailwind CSS class variants used in your project. ",(0,s.jsx)(n.strong,{children:"A manifest file is a collection of all the Tailwind classes that your application might use, which are extracted from your configuration files."})," This manifest enables Tailwind to efficiently process only the classes your application actually needs, improving build performance and reducing CSS bundle size."]}),"\n",(0,s.jsxs)(n.div,{className:"rspress-directive warning",children:[(0,s.jsx)(n.div,{className:"rspress-directive-title",children:"WARNING"}),(0,s.jsxs)(n.div,{className:"rspress-directive-content",children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"This package is specifically designed to work with Tailwind CSS v4, which introduced the @source directive for improved class extraction."})}),"\n"]})]}),"\n",(0,s.jsxs)(n.h2,{id:"installation",children:["Installation",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#installation",children:"#"})]}),"\n",(0,s.jsxs)(r.Tabs,{children:[(0,s.jsx)(r.Tab,{label:"pnpm",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"pnpm add @dyesthetics-lab/tailwind-manifest-creators\n"})})}),(0,s.jsx)(r.Tab,{label:"npm",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm install @dyesthetics-lab/tailwind-manifest-creators\n"})})})]}),"\n",(0,s.jsxs)(n.h2,{id:"usage",children:["Usage",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#usage",children:"#"})]}),"\n",(0,s.jsxs)(n.h3,{id:"manifest-creator",children:["Manifest Creator",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#manifest-creator",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["The package exports a ",(0,s.jsx)(n.code,{children:"createManifest"})," function that generates a manifest file containing all Tailwind class variants that match a specified glob pattern."]}),"\n",(0,s.jsxs)(n.p,{children:["To implement this in your build process, create a pre-build script file (e.g., ",(0,s.jsx)(n.code,{children:"pre-build.ts"}),"):"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import { createManifest } from '@dyesthetics-lab/tailwind-manifest-creators';\n\ncreateManifest({\n  globPath: './**/*.tailwindConfig.json',\n});\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"globPath"})," parameter specifies which files to scan for Tailwind class definitions. In this example, we're searching for all files with the ",(0,s.jsx)(n.code,{children:".tailwindConfig.json"})," extension."]}),"\n",(0,s.jsxs)(n.h3,{id:"configuration-files",children:["Configuration Files",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#configuration-files",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"Your project should contain one or more configuration files matching the specified glob pattern. These files define the Tailwind variants your components use."}),"\n",(0,s.jsxs)(n.p,{children:["Example ",(0,s.jsx)(n.code,{children:"tailwindConfig.json"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "preset": {\n    "variants": {\n      "appearance": {\n        "default": "bg-red-500",\n        "primary": "bg-blue-500",\n        "secondary": "bg-green-500",\n        "tertiary": "bg-yellow-500"\n      }\n    }\n  },\n  "options": {\n    "responsiveVariants": true\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.div,{className:"rspress-directive info",children:[(0,s.jsx)(n.div,{className:"rspress-directive-title",children:"INFO"}),(0,s.jsxs)(n.div,{className:"rspress-directive-content",children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.strong,{children:["Note that the ",(0,s.jsx)(n.code,{children:"responsiveVariants"})," option in your configuration controls whether responsive variants are generated. When set to ",(0,s.jsx)(n.code,{children:"true"}),", the manifest will include responsive variants (like sm:, md:, lg:) for your classes. The tool does not automatically create responsive variants - it generates them based on your configuration."]})}),"\n"]})]}),"\n",(0,s.jsxs)(n.h3,{id:"integrating-with-your-build-process",children:["Integrating with Your Build Process",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#integrating-with-your-build-process",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["Configure the pre-build script in your ",(0,s.jsx)(n.code,{children:"package.json"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "scripts": {\n    "prebuild": "pnpx tsx ./src/scripts/pre-build.ts"\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["When you run your build process, the pre-build script will execute first, creating a ",(0,s.jsx)(n.code,{children:"global.tailwind.manifest"})," file in ",(0,s.jsx)(n.code,{children:"node_modules/.tailwind-manifests/"}),". This manifest will contain all Tailwind classes found in your configuration files, including responsive variants if specified."]}),"\n",(0,s.jsx)(n.p,{children:"Example manifest content:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"sm:bg-red-500 md:bg-red-500 lg:bg-red-500 sm:bg-blue-500 md:bg-blue-500 lg:bg-blue-500 sm:bg-green-500 md:bg-green-500 lg:bg-green-500 sm:bg-yellow-500 md:bg-yellow-500 lg:bg-yellow-500\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"configuring-tailwind-css",children:["Configuring Tailwind CSS",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#configuring-tailwind-css",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"To tell Tailwind CSS where to find the manifest file, add this directive to your css entry point:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:"@source '../../node_modules/**/*.tailwind.manifest';\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"customizing-the-target-path",children:["Customizing the Target Path",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#customizing-the-target-path",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"You can customize where the manifest file is created:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import { createManifest } from '@dyesthetics-lab/tailwind-manifest-creators';\nimport { join } from 'path';\n\ncreateManifest({\n  globPath: './**/*.tailwindConfig.json',\n  batchOptions: {\n    targetPath: join(process.cwd(), 'src', 'global.tailwind.manifest'),\n  }\n});\n"})}),"\n",(0,s.jsx)(n.p,{children:"If you customize the target path, make sure to update the path in your css entry point:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:"@source '../../src/global.tailwind.manifest';\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"integration-plugins",children:["Integration Plugins",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#integration-plugins",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"The package provides build tool plugins to simplify the integration process."}),"\n",(0,s.jsxs)(n.h3,{id:"vite-plugin",children:["Vite Plugin",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#vite-plugin",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["Configure the plugin in your ",(0,s.jsx)(n.code,{children:"vite.config.ts"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import { createVitePlugin } from '@dyesthetics-lab/tailwind-manifest-creators/vite';\n\nexport default {\n  plugins: [\n    createVitePlugin()\n  ],\n};\n"})}),"\n",(0,s.jsx)(n.p,{children:"Then add the source directive to your css entry point:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:"@source '../../node_modules/**/*.tailwind.manifest';\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"webpack-plugin",children:["Webpack Plugin",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#webpack-plugin",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["For Next.js projects, configure the plugin in your ",(0,s.jsx)(n.code,{children:"next.config.js"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'import type { NextConfig } from "next";\n\nconst createNextConfig = async (): Promise<NextConfig> => {\n  return {\n    webpack(config, {dev}) {\n      if (!dev) {\n        return config;\n      }\n\n      config.module.rules.push({\n        test: /\\.tailwindConfig.json$/,\n        use: [\n          {\n            loader: require.resolve("@dyesthetics-lab/tailwind-manifest-creators/manifest-loader"),\n          }\n        ]\n      });\n\n      return config;\n    }\n  };\n};\n\nexport default createNextConfig;\n'})}),"\n",(0,s.jsx)(n.p,{children:"Then add the source directive to your css entry point:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:"@source '../../node_modules/**/*.tailwind.manifest';\n"})}),"\n",(0,s.jsx)(n.p,{children:"This approach allows Tailwind to access all the necessary class variants without having to scan your entire codebase, improving build performance and ensuring all dynamically generated classes are properly included in your CSS output."})]})}function l(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,a.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(t,{...e})}):t(e)}let c=l;l.__RSPRESS_PAGE_META={},l.__RSPRESS_PAGE_META["guide%2Ftailwind-manifest-creators.mdx"]={toc:[{text:"Introduction",id:"introduction",depth:2},{text:"Installation",id:"installation",depth:2},{text:"Usage",id:"usage",depth:2},{text:"Manifest Creator",id:"manifest-creator",depth:3},{text:"Configuration Files",id:"configuration-files",depth:3},{text:"Integrating with Your Build Process",id:"integrating-with-your-build-process",depth:3},{text:"Configuring Tailwind CSS",id:"configuring-tailwind-css",depth:3},{text:"Customizing the Target Path",id:"customizing-the-target-path",depth:3},{text:"Integration Plugins",id:"integration-plugins",depth:2},{text:"Vite Plugin",id:"vite-plugin",depth:3},{text:"Webpack Plugin",id:"webpack-plugin",depth:3}],title:"Tailwind Manifest Creators",headingTitle:"Tailwind Manifest Creators",frontmatter:{}}}}]);