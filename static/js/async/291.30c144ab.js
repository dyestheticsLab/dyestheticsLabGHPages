"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([["291"],{3162:function(e,n,t){t.r(n),t.d(n,{default:()=>c});var a=t(1549),o=t(6603),r=t(4453);function s(e){let n=Object.assign({h1:"h1",a:"a",p:"p",strong:"strong",h2:"h2",code:"code",pre:"pre",h3:"h3"},(0,o.ah)(),e.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.h1,{id:"component-react-creators",children:["Component react creators",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#component-react-creators",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"As for now we have only one utility, we plan to create more, of course, in the following weeks."}),"\n",(0,a.jsxs)(n.p,{children:["This utility is the ",(0,a.jsx)(n.strong,{children:"react component creators"})]}),"\n",(0,a.jsxs)(n.h2,{id:"what-does-it-do",children:["What does it do?",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#what-does-it-do",children:"#"})]}),"\n",(0,a.jsxs)(n.p,{children:["This set of utilities are actually react component factories for what some libraries like\nMUI and Mantine know as ",(0,a.jsx)(n.a,{href:"https://mantine.dev/guides/polymorphic/",target:"_blank",rel:"noopener noreferrer",children:"Polymorphic Components"}),"\nand also to create components that extract some props and use them to resolve the className.\nThere is a reason we are creating this, we have some ideas in mind following the\n",(0,a.jsx)(n.a,{href:"https://medium.com/p/0d7195316741#1045-9740101021bc",target:"_blank",rel:"noopener noreferrer",children:"article we published in medium"}),"\nto create some optimizations in build/compile time."]}),"\n",(0,a.jsxs)(n.p,{children:["In short, this means you can create a ",(0,a.jsx)(n.code,{children:"Button"})," that can render not only as a ",(0,a.jsx)(n.code,{children:"button"})," but as any\nother React ",(0,a.jsx)(n.code,{children:"ElementType"}),"."]}),"\n",(0,a.jsx)(n.p,{children:"Also you we are going to be able to create a className resolver function that is going to extract\nfrom your props what info is needed to create a className according, for instance, some variants\nof your component, and separate them from the real props of the component."}),"\n",(0,a.jsx)(n.p,{children:"I almost forgot to mention that it is typesafe, so your IDE is going to autocomplete the needed props"}),"\n",(0,a.jsxs)(n.h2,{id:"installation",children:["Installation",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#installation",children:"#"})]}),"\n",(0,a.jsxs)(r.Tabs,{children:[(0,a.jsx)(r.Tab,{label:"pnpm",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"pnpm add @dyesthetics-lab/react-component-creators\n"})})}),(0,a.jsx)(r.Tab,{label:"npm",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npm install @dyesthetics-lab/react-component-creators\n"})})})]}),"\n",(0,a.jsxs)(n.h2,{id:"usage",children:["Usage",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#usage",children:"#"})]}),"\n",(0,a.jsxs)(n.h2,{id:"creating-a-styled-component",children:["Creating a styled component",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#creating-a-styled-component",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"This is factory of a polymorphic component and as well admits variant props for your custom className\nresolver"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",meta:'title="Button.tsx"',children:"import { createStyledComponent } from '@dyesthetics-lab/react-component-creators';\n\nexport interface ButtonProps {\n  appearance: 'red' | 'blue';\n}\n\nexport const Button = createStyledComponent<'button', ButtonProps>({\n  Component: 'button',\n  extractStyleProps: (props) => {\n    const { appearance, ...styleProps } = props;\n\n    return {\n      styleProps: {appearance},\n      componentOwnProps: styleProps\n    };\n  },\n  classNameResolver: (styleProps) => {\n    return styleProps.appearance === 'red' ? 'red' :'blue';\n  }\n});\n\n"})}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"extractStyleProps"})," is a needed function to separate what props are real props\now your component (",(0,a.jsx)(n.code,{children:"componentOwnProps"}),") and what props are going to be used to resolve the className\n(",(0,a.jsx)(n.code,{children:"styleProps"}),")."]}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"classNameResolver"})," will only get what you defined in ",(0,a.jsx)(n.code,{children:"extractStyleProps"})," as ",(0,a.jsx)(n.code,{children:"styleProps"})," and\nyou may use that to form your final className to get the correct styles."]}),"\n",(0,a.jsxs)(n.h3,{id:"example-with-tailwindvariants-and-rambda",children:["Example with tailwindVariants and Rambda",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#example-with-tailwindvariants-and-rambda",children:"#"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",meta:'title="Button.tsx"',children:"import { createStyledComponent } from '@dyesthetics-lab/react-component-creators';\nimport { tv } from 'tailwind-variants';\nimport { pick, omit } from 'ramda';\n\nexport interface ButtonProps {\n  appearance: 'red' | 'blue';\n}\n\nconst variants = {\n  appearance: {\n    red: 'text-red-500',\n    blue: 'text-blue-500',\n  }\n}\n\nconst button = tv({\n  variants\n})\n\nconst variantsKeys = Object.keys(variants);\n\nconst createPropsByVariants = (variants: string[])=>(props)=>{\n  return {\n    styleProps: pick(variants, props),\n    componentOwnProps: omit(variants, props)\n  }\n}\n\nexport const Button = createStyledComponent<'button', ButtonProps>({\n  Component: 'button',\n  extractStyleProps: createPropsByVariants(variantsKeys),\n  classNameResolver: button\n});\n\n"})}),"\n",(0,a.jsx)(n.p,{children:"Then you can use your shiny button like this"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",meta:'title="App.tsx"',children:'import { Button } from \'./Button\';\n\n\nexport const App = () => {\n  return (\n    <Button appearance="red" as="a" href="#">\n      Click me\n    </Button>\n  )\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"Why would I want a button that is a link? Well, because sometimes you need the styles of a button\nin an anchor tag."}),"\n",(0,a.jsxs)(n.h2,{id:"creating-a-only-polymorphic-component",children:["Creating a only polymorphic component",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#creating-a-only-polymorphic-component",children:"#"})]}),"\n",(0,a.jsxs)(n.p,{children:["But if you do not want to create a custom className resolver and only need a polymorphic component\nyou can use ",(0,a.jsx)(n.code,{children:"createReactMetaComponent"})]}),"\n",(0,a.jsxs)(n.h2,{id:"creating-a-component-that-extracts-some-props-to-create-the-classname",children:["Creating a component that extracts some props to create the className",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#creating-a-component-that-extracts-some-props-to-create-the-classname",children:"#"})]}),"\n",(0,a.jsxs)(n.p,{children:["But this time is not a polymorphic component, you can use ",(0,a.jsx)(n.code,{children:"createComponentWithStyleProps"}),"\nand the component is not going to have an ",(0,a.jsx)(n.code,{children:"as"})," prop."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",meta:'title="Button.tsx"',children:"\nimport { createComponentWithStyleProps } from '@dyesthetics-lab/react-component-creators';\n\nexport interface ButtonProps {\n  appearance: 'red' | 'blue';\n}\n\nexport const Button = createComponentWithStyleProps<'button', ButtonProps>({\n  Component: 'button',\n  extractStyleProps: (props) => {\n    const { appearance, ...styleProps } = props;\n\n    return {\n      styleProps: {appearance},\n      componentOwnProps: styleProps\n    };\n  },\n  classNameResolver: (styleProps) => {\n    return styleProps.appearance === 'red' ? 'red' :'blue';\n  }\n});\n\n"})}),"\n",(0,a.jsx)(n.p,{children:"This component is always going to be button."}),"\n",(0,a.jsxs)(n.h2,{id:"final-words",children:["Final words",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#final-words",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"Obviously you may use directly a classname resolver of your liking directly in any\ncomponent directly in the code like this (suppose we were using tailwindVariants):"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"\n<button className={button({appearance: 'red'})}>Click me</button>\n\n"})}),"\n",(0,a.jsx)(n.p,{children:"And it is really good, but we wanted to give some structure to react components to make them\nto have by props all your variants."}),"\n",(0,a.jsx)(n.p,{children:"If you red the article about our ideas that came from our adventures in the place were we study,\nyou may know we are planning on using a compiler to make some optimizations at build time."}),"\n",(0,a.jsx)(n.p,{children:"And since react is something that is going to be in our projects, we wanted to make the first\nstep in this direction."})]})}function i(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,o.ah)(),e.components);return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(s,{...e})}):s(e)}let c=i;i.__RSPRESS_PAGE_META={},i.__RSPRESS_PAGE_META["guide%2Findex.mdx"]={toc:[{text:"What does it do?",id:"what-does-it-do",depth:2},{text:"Installation",id:"installation",depth:2},{text:"Usage",id:"usage",depth:2},{text:"Creating a styled component",id:"creating-a-styled-component",depth:2},{text:"Example with tailwindVariants and Rambda",id:"example-with-tailwindvariants-and-rambda",depth:3},{text:"Creating a only polymorphic component",id:"creating-a-only-polymorphic-component",depth:2},{text:"Creating a component that extracts some props to create the className",id:"creating-a-component-that-extracts-some-props-to-create-the-classname",depth:2},{text:"Final words",id:"final-words",depth:2}],title:"Component react creators",headingTitle:"Component react creators",frontmatter:{}}}}]);