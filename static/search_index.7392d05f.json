[{"id":0,"title":"Creating a Complicated Observer","content":"#\n\nToday I need to learn how to use Zustand. However, before I even started, I told\nmyself, \"Wait a minute—let's complicate my life for a few minutes to see how far\nI can get.\"\n\nFirst of all, you must already understand how useSyncExternalStore works before\ndiving into what I'm doing.\n\nSo what I'm going to do is create an observer creator, because—as you\nknow—useSyncExternalStore requires two things: a function that subscribes it to\nan external store and a snapshot function. The subscription function is meant to\ntell the observer to save a function to be executed later, which then calls the\nsnapshot function. When the snapshot function runs, it compares the previous\nvalue with the new snapshot result to decide whether or not to trigger a\nre-render.\n\nHere's what the code might look like:\n\n\n\nThe state is kept inside the closure, and the getState function accepts a picker\nfunction so that if you pass a big object, you aren't forcing all subscribers to\nre-render every time—it's better to pick only the part of the object you need to\ncompare.\n\nNice and done. Now, the problem with this approach is that if you create this at\nthe top level, you're creating a singleton—even if you need it for just one page\n(I'm talking about CSR). So how do you scope it to a single page and then let it\ndisappear?\n\nWell, we can use React Context. But before doing that, I'll create two hooks to\nsimplify usage. They look anemic (a tech term, like in anemic classes) actually,\nbut here they are anyway:\n\n\n\nNow what follows is the creation of the context. Isn't that a singleton as well?\nYes—maybe this will prove useful later when I want to ensure that this is\nclient-side only or for similar scenarios. Let's continue:\n\n\n\nNow we can have:\n\n\n\nFor the Emisor component:\n\n\n\nAnd for the Listener component:\n\n\n\nNow it will work. Some additional considerations: I may need a smarter way to\ncreate contexts—a context factory that creates contexts when needed so I can\nchoose my listeners by key from a map. And why would I do that? Because\nmicrofrontends :v. I'm looking for a global way to communicate events throughout\nmy app, and yes, I need a more agnostic store. I think that createObserver is\nmore than enough. You can subscribe to it with a useEffect or any other method\nyou can imagine, and by using the picker, you can extract only what you want\nfrom a big object (even though microfrontends say the API between your UI\ncomponents should be minimal and clean).\n\nI'm also looking for a way so that when subscribing, you can tell the observer,\n\"Hey, when emitting, just do it for these listeners and not the others.\" I'm\nthinking of something like this (heads up: a lot of any types , here, this was a\nlast minute idea):\n\n\n\nAnd now it's time to check if this actually supports my idea for a microfrontend\nwith an app shell.\n\nThere is a caveat, though: now that I see this, subscribing to events in this\nway isn't fully possible. Maybe I need to create a factory here? See you in\nanother article where I continue to make my brain wrestle and my life harder.","routePath":"/dyestheticsLabGHPages/blog/creating-a-complicated-observer","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":1,"title":"Introduction","content":"#\n\nHere we will share some of our experiences and ideas about the tools we are\nbuilding. We will also share some of our thoughts on the future of these tools\nand how they can help us build better design systems.\n\nAlso some tips and tricks with generative AI","routePath":"/dyestheticsLabGHPages/blog/","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":2,"title":"Using GitHub Copilot with Our Libraries","content":"#\n\n> Original written: 03/28/2025\n\nGitHub Copilot is a wonderful tool that now allows us to automatically attach\nmarkdown files as context for code generation, code review, and test generation.\nAdditionally, Copilot offers a powerful feature called reusable prompts, which\ncan help us create code with predefined instructions.\n\nWhen experimenting with our libraries, we wanted to take advantage of these\nfeatures. First, we modified our .vscode settings to point to our prompts and\ncode generation files. You can find more information on how to do this in this\nlink.\n\nNext, we started creating the instructions. For instance, in the file\n.github/copilot-instructions.md, we specified that we use React 19, a monorepo\nsetup, and included health advice and words of encouragement—because empathy\nmatters.\n\nNow, GitHub Copilot Chat provides answers while keeping those files in context\nwith our custom instructions.\n\n\nThe Prompt File#\n\nTo create components using one of our packages, we needed to reference the code\nof that package. GitHub Copilot documentation suggests doing this in the form of\nmarkdown links. Since we have the code in the same monorepo, we can reference it\ndirectly. However, if you are using our libraries without direct access to the\nsource code in the same repository, how can this be solved?\n\nYou can reference the code in your node_modules folder, including the\ncorresponding typings. While the JavaScript code is minified and harder for\nGitHub Copilot to use, the typings are still accessible.\n\nHere’s an example of how to do this:\n\n\n\nMake sure to adjust the paths relative to the location of your prompt file.\n\n\nFinal Words#\n\nYes, we should document the API and typings in our libraries to further enhance\nAI code generation. Nevertheless, this example can be expanded to other\nscenarios and libraries beyond our own.","routePath":"/dyestheticsLabGHPages/blog/using-gh-copilot","lang":"","toc":[{"text":"The Prompt File","id":"the-prompt-file","depth":2,"charIndex":914},{"text":"Final Words","id":"final-words","depth":2,"charIndex":1636}],"domain":"","frontmatter":{},"version":""},{"id":3,"title":"Do you need a state manager for that DATA?","content":"#\n\nYou may not need a state manager for some type fo data. But before diving into\nit some words of caution.\n\n\nWords of caution :)#\n\nDon't get me wrong—state managers are incredibly powerful, and I love them. This\narticle isn't about telling you to rip Redux, Zustand, or Jotai out of your\ncodebase. In many cases, they are essential for managing state that multiple\ncomponents subscribe to, ensuring they update when the state changes.\n\nBut here's the thing: not all data in your app needs that kind of management.\nSome state can be handled differently, without introducing unnecessary\ncomplexity or performance overhead.\n\nState Managers Are Not an All-or-Nothing Decision\n\nThis isn't a “pick one and stick with it” scenario. State managers and\nalternative approaches can coexist in your app.\n\nSome data fits naturally in a global store, while other pieces of state can be\nhandled more efficiently without one.\n\nIt all depends on how and where the data is used.\n\nWe are going to use TanStack Router for the example, but the same applies to\nother routing libraries provided they have the features to support it.\n\n\nA simple example#\n\nI'm going to present a simple example for the sake of explanation. Imagine we\nhave an input field where a user enters some data. Once the input is provided\nand validated, the form (using React 19 form actions on the client side) is\nsubmitted. The action function then sends a request to the backend with the\ninput data, and if the response is successful, we navigate the user to another\npage.\n\nThe important part is that we need data from the response on the second page\neither to display it visually or to process it before showing something to the\nuser.\n\nUsing TanStack Router, you can pass that data via search parameters using the\nnavigation function from useNavigate.\n\n(This is a simplified example, and in a real-world scenario, you would likely\nhave more complex data structures and error handling.)\n\n\n\nAnd now we can get the response data that is only needed in the second page with\nthe useSearch hook\n\n\n\nBut what if you don't want to expose the data in the URL as search params?\nBecause if you use navigate with the search params, it will be visible in the\nURL.\n\nIn that case, you can mask those parameters. TanStack Router supports this\napproach by maintaining temporary location state internally.\n\n\n\nThis data, can be used as well in your destination route loaders, there you have\nthe opportunity to perform any required operations before rendering.\n\nAgain, this approach isn't for every case. Consider a scenario where you have a\ncomponent, say, a button—and one or more components that aren't its direct\nchildren need to update visually when that button is clicked. In this scenario,\nwe're dealing with an app state, that is, state internal to your application\nthat isn't fetched from an external system. Here, it makes sense to use a state\nmanager.\n\nAnd what about React Query? It features a powerful caching mechanism. If you\nobtain a result in one mutation or query, you can retrieve the data response and\neven the params that were used for the request from its cache elsewhere in your\napp when needed. (There's a great article on this topic by TkDodo that explains\nit in more detail.)\n\nThe key is to think carefully about how the data is going to be used. Some\ndevelopers prefer to centralize everything in one store for predictability.\nWhile that creates a consistent pattern, making it easy for AI tools and new\ndevelopers to follow, it can also lead to workarounds and unnecessary\nre-renders.\n\nThe argument for centralization is based on having one predictable pattern;\nhowever, this can sometimes create secondary issues.\n\nI believe that better documentation, like a flow diagram outlining different\nscenarios, could help clarify when to use a state manager versus alternative\napproaches. Perhaps even an abstraction that handles data storage based on\ndeclared usage, or heuristics that decide the best storage method, could be\nbeneficial. It’s a bit of a stretch, but it’s an idea that popped into my head\nwhile writing this.\n\nWhat do you think? Do you have examples where the data doesn't need to be stored\nin a state manager? Let's discuss!","routePath":"/dyestheticsLabGHPages/blog/you-may-not-need-a-state-manager","lang":"","toc":[{"text":"Words of caution :)","id":"words-of-caution-","depth":2,"charIndex":109},{"text":"A simple example","id":"a-simple-example","depth":2,"charIndex":1112}],"domain":"","frontmatter":{},"version":""},{"id":4,"title":"Component react creators","content":"#\n\n\nWhat does it do?#\n\nThese utilities are actually react component factories for what some libraries\nlike MUI and Mantine know as Polymorphic Components and also to create\ncomponents that extract some props and use them to resolve the className. There\nis a reason we are creating this; we have some ideas in mind following the\narticle we published in medium to create some optimizations in build/compile\ntime.\n\nIn short, this means you can create a Button that can render not only as a\nbutton but as any other React ElementType.\n\nAlso you are going to be able to create a className resolver function that\nextracts from your props what info is needed to create a className according to,\nfor instance, some variants of your component, and separate them from the real\nprops of the component.\n\nI almost forgot to mention that it is typesafe, so your IDE is going to\nautocomplete the needed props.\n\n> ⚠️ WARNING: This library is only compatible with React 19. It will not work\n> with earlier versions of React due to dependency on new features and APIs\n> introduced in React 19.\n\n\nInstallation#\n\n\nUsage#\n\n\nCreating a styled component#\n\nThis is a factory of a polymorphic component that also accepts variant props for\nyour custom className resolver\n\n\n\nThe extractStyleProps is a needed function to separate what props are real props\nof your component (componentOwnProps) and what props are going to be used to\nresolve the className (styleProps).\n\nThe classNameResolver will only get what you defined in extractStyleProps as\nstyleProps and you may use that to form your final className to get the correct\nstyles.\n\nSometimes you would want not to modify the className but the style prop, this is\nto apply change control via css vars; for those cases we provide a styleResolver\nfunction.\n\n\n\n\n\nIn any case, you can use the Button component like this:\n\n\n\n\nExample with tailwindVariants and Rambda#\n\n\n\nThen you can use your shiny button like this\n\n\n\nWhy would I want a button that is a link? Well, because sometimes you need the\nstyles of a button in an anchor tag.\n\n\nCreating a only polymorphic component#\n\nBut if you do not want to create a custom className resolver and only need a\npolymorphic component you can use createReactMetaComponent\n\n\nCreating a component that extracts some props to create the className#\n\nBut this time it is not a polymorphic component, you can use\ncreateComponentWithStyleProps and the component is not going to have an as prop.\n\n\n\nThis component is always going to be a button.\n\n\nFinal words#\n\nObviously you may use directly a classname resolver of your liking directly in\nany component directly in the code like this (suppose we were using\ntailwindVariants):\n\n\n\nAnd it is really good, but we wanted to give some structure to react components\nto make them have all your variants by props.\n\nIf you read the article about our ideas that came from our adventures in the\nplace where we study, you may know we are planning on using a compiler to make\nsome optimizations at build time.\n\nAnd since react is something that is going to be in our projects, we wanted to\nmake the first step in this direction.","routePath":"/dyestheticsLabGHPages/guide/component-creators","lang":"","toc":[{"text":"What does it do?","id":"what-does-it-do","depth":2,"charIndex":3},{"text":"Installation","id":"installation","depth":2,"charIndex":1076},{"text":"Usage","id":"usage","depth":2,"charIndex":1092},{"text":"Creating a styled component","id":"creating-a-styled-component","depth":2,"charIndex":1101},{"text":"Example with tailwindVariants and Rambda","id":"example-with-tailwindvariants-and-rambda","depth":3,"charIndex":1845},{"text":"Creating a only polymorphic component","id":"creating-a-only-polymorphic-component","depth":2,"charIndex":2056},{"text":"Creating a component that extracts some props to create the className","id":"creating-a-component-that-extracts-some-props-to-create-the-classname","depth":2,"charIndex":2234},{"text":"Final words","id":"final-words","depth":2,"charIndex":2500}],"domain":"","frontmatter":{},"version":""},{"id":5,"title":"Introduction","content":"#\n\nWe are creating several libraries to help us build design systems, especially\nfor React.js. It is going to be a long journey ahead of us.\n\nThis idea was born during a university project where we were challenged to meet\nseveral constraints because we asked for a more demanding task.\n\nWe know there are many excellent tools out there that are evolving rapidly,\noffering great developer experience (DX), decent performance, and portability.\nHowever, they did not fully meet 100% of the requirements we were tasked with,\nsuch as:\n\n * Short build times\n * No runtime overhead\n * 90% CSS coverage\n * Compatibility with React Server Components (RSC) and runtime style\n   information (SSR)\n * Good JSX developer experience\n\n\nProjects That Inspire Us#\n\nWhile researching tools to assist with our project, we discovered some amazing\nlibraries that inspired us or even became the foundation of our tools. We are\ndeeply grateful to the open-source community for their incredible work:\n\n * Radix\n * Tamagui\n * Stitches\n * Mantine\n * UnoCSS\n * Tailwind\n * Tailwind Variants\n\n\nSome Context...#\n\nFor example, we wanted to use a CSS variant generator because you often don't\nknow what variants you'll need at compile time. All the classes representing\npossible states of that variant were generated, but the CSS coverage was not\nacceptable to our mentors.\n\nThen we discovered Tamagui, which was wonderful because it optimized JSX by\nextracting variants and creating a CSS file with only the classes that were\nused. We love Tamagui.\n\nHowever, we needed to use the components as RSC, and the styles were not known\nahead of time for those RSC components since we were fetching that information\nfrom a remote data source (SSR).\n\nThe heuristics for compiling a component were lost because we didn't know which\nvariant value to apply until runtime.\n\nThis is why we are building tools to help us create, with luck, a complete\nframework that addresses all the constraints we are facing.\n\nIn this context, we do not aspire to replace these very powerful libraries. We\nare simply experimenting with some ideas.\n\n\nThe Road Ahead#\n\nCurrently, we are building a library of React component creators and, around\nthat, a Tailwind wrapper using Tailwind Variants (we love Tailwind Variants).\n\nTo address the missing responsive variants, we are creating a Babel loader and a\nVite plugin to generate all the responsive variants at compile time.\n\nNext, we plan to create an SWC plugin to extract only the necessary classes from\nJSX syntax and transform them into optimized components with only the required\nTailwind classes.\n\nThe component creator will assist us in development mode while we learn enough\nRust to create the plugin.\n\nFor RSC components with runtime data sources, we aim to create a set of Next.js\nutilities to register the required classes during SSG mode. These utilities will\nuse the resolved values to generate only the necessary classes in the CSS file\nand inline the critical CSS.\n\nFor client components, the approach is slightly different. We are exploring ways\nto extract the classes passed to the client component from the server component,\npossibly using a proxy.\n\nThese approaches will require a strong set of rules and conventions, which we\nneed to effectively communicate through warnings and linter rules.\n\nAs you can see, there is a lot of work to do, and we are just getting started.\n\n\nWhat We Have So Far#\n\nWe have several packages, but the three most useful are:\n\n@dyesthetics-lab/react-component-creators This is our base library for creating\npolymorphic components with styles and variants.\n\n * @dyesthetics-lab/react-tv-variants-creators A wrapper around Tailwind\n   Variants and @dyesthetics-lab/react-component-creators to create responsive\n   variants. Note: This does not work as a standalone library.\n\n * @dyesthetics-lab/tailwind-manifest-creators To effectively create responsive\n   variants, we need to generate a manifest with all the responsive variants so\n   TailwindCSS can read it and generate the required CSS. This module includes\n   loaders and plugins to help with this process. (We are also planning to offer\n   a codegen CLI as an alternative to this package.)\n\nYou can test the following libraries:\n\n * @dyesthetics-lab/react-component-creators\n * @dyesthetics-lab/react-tv-variants-creators\n * @dyesthetics-lab/tailwind-utils\n * @dyesthetics-lab/tailwind-manifest-creators\n * @dyesthetics-lab/tailwind-utils\n\n\nCan I Help Out?#\n\nOf course! We are looking for contributors to help us with the project. We want\nto learn, but we are currently very busy with university, so please be patient\nif we don't respond immediately. Nevertheless, any PR from a fork will be\nreviewed within the same week it is submitted.\n\n\nFinal Words#\n\nWe are here to learn and greatly appreciate any feedback you can provide.\n\nAdditionally, we have an article that inspired this project. We created the\nlibraries shortly after the article was published.","routePath":"/dyestheticsLabGHPages/guide/","lang":"","toc":[{"text":"Projects That Inspire Us","id":"projects-that-inspire-us","depth":2,"charIndex":720},{"text":"Some Context...","id":"some-context","depth":2,"charIndex":1065},{"text":"The Road Ahead","id":"the-road-ahead","depth":2,"charIndex":2089},{"text":"What We Have So Far","id":"what-we-have-so-far","depth":2,"charIndex":3383},{"text":"Can I Help Out?","id":"can-i-help-out","depth":2,"charIndex":4433},{"text":"Final Words","id":"final-words","depth":2,"charIndex":4733}],"domain":"","frontmatter":{},"version":""},{"id":6,"title":"Tailwind Manifest Creators","content":"#\n\n\nIntroduction#\n\nThe @dyesthetics-lab/tailwind-manifest-creators package creates manifest files\ncontaining all Tailwind CSS class variants used in your project. A manifest file\nis a collection of all the Tailwind classes that your application might use,\nwhich are extracted from your configuration files. This manifest enables\nTailwind to efficiently process only the classes your application actually\nneeds, improving build performance and reducing CSS bundle size.\n\nWARNING\n\nThis package is specifically designed to work with Tailwind CSS v4, which\nintroduced the @source directive for improved class extraction.\n\n\nInstallation#\n\n\nUsage#\n\n\nManifest Creator#\n\nThe package exports a createManifest function that generates a manifest file\ncontaining all Tailwind class variants that match a specified glob pattern.\n\nTo implement this in your build process, create a pre-build script file (e.g.,\npre-build.ts):\n\n\n\nThe globPath parameter specifies which files to scan for Tailwind class\ndefinitions. In this example, we're searching for all files with the\n.tailwindConfig.json extension.\n\n\nConfiguration Files#\n\nYour project should contain one or more configuration files matching the\nspecified glob pattern. These files define the Tailwind variants your components\nuse.\n\nExample tailwindConfig.json:\n\n\n\nINFO\n\nNote that the responsiveVariants option in your configuration controls whether\nresponsive variants are generated. When set to true, the manifest will include\nresponsive variants (like sm:, md:, lg:) for your classes. The tool does not\nautomatically create responsive variants - it generates them based on your\nconfiguration.\n\n\nIntegrating with Your Build Process#\n\nConfigure the pre-build script in your package.json:\n\n\n\nWhen you run your build process, the pre-build script will execute first,\ncreating a global.tailwind.manifest file in node_modules/.tailwind-manifests/.\nThis manifest will contain all Tailwind classes found in your configuration\nfiles, including responsive variants if specified.\n\nExample manifest content:\n\n\n\n\nConfiguring Tailwind CSS#\n\nTo tell Tailwind CSS where to find the manifest file, add this directive to your\ncss entry point:\n\n\n\n\nCustomizing the Target Path#\n\nYou can customize where the manifest file is created:\n\n\n\nIf you customize the target path, make sure to update the path in your css entry\npoint:\n\n\n\n\nIntegration Plugins#\n\nThe package provides build tool plugins to simplify the integration process.\n\n\nVite Plugin#\n\nConfigure the plugin in your vite.config.ts:\n\n\n\nThen add the source directive to your css entry point:\n\n\n\n\nWebpack Plugin#\n\nFor Next.js projects, configure the plugin in your next.config.js:\n\n\n\nThen add the source directive to your css entry point:\n\n\n\nThis approach allows Tailwind to access all the necessary class variants without\nhaving to scan your entire codebase, improving build performance and ensuring\nall dynamically generated classes are properly included in your CSS output.","routePath":"/dyestheticsLabGHPages/guide/tailwind-manifest-creators","lang":"","toc":[{"text":"Introduction","id":"introduction","depth":2,"charIndex":3},{"text":"Installation","id":"installation","depth":2,"charIndex":618},{"text":"Usage","id":"usage","depth":2,"charIndex":634},{"text":"Manifest Creator","id":"manifest-creator","depth":3,"charIndex":643},{"text":"Configuration Files","id":"configuration-files","depth":3,"charIndex":1088},{"text":"Integrating with Your Build Process","id":"integrating-with-your-build-process","depth":3,"charIndex":1635},{"text":"Configuring Tailwind CSS","id":"configuring-tailwind-css","depth":3,"charIndex":2040},{"text":"Customizing the Target Path","id":"customizing-the-target-path","depth":3,"charIndex":2169},{"text":"Integration Plugins","id":"integration-plugins","depth":2,"charIndex":2348},{"text":"Vite Plugin","id":"vite-plugin","depth":3,"charIndex":2449},{"text":"Webpack Plugin","id":"webpack-plugin","depth":3,"charIndex":2570}],"domain":"","frontmatter":{},"version":""}]