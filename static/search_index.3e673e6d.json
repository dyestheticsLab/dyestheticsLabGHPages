[{"id":0,"title":"Component react creators","content":"#\n\n\nWhat does it do?#\n\nThese utilities are actually react component factories for what some libraries\nlike MUI and Mantine know as Polymorphic Components and also to create\ncomponents that extract some props and use them to resolve the className. There\nis a reason we are creating this; we have some ideas in mind following the\narticle we published in medium to create some optimizations in build/compile\ntime.\n\nIn short, this means you can create a Button that can render not only as a\nbutton but as any other React ElementType.\n\nAlso you are going to be able to create a className resolver function that\nextracts from your props what info is needed to create a className according to,\nfor instance, some variants of your component, and separate them from the real\nprops of the component.\n\nI almost forgot to mention that it is typesafe, so your IDE is going to\nautocomplete the needed props.\n\n> ⚠️ WARNING: This library is only compatible with React 19. It will not work\n> with earlier versions of React due to dependency on new features and APIs\n> introduced in React 19.\n\n\nInstallation#\n\n\nUsage#\n\n\nCreating a styled component#\n\nThis is a factory of a polymorphic component that also accepts variant props for\nyour custom className resolver\n\n\n\nThe extractStyleProps is a needed function to separate what props are real props\nof your component (componentOwnProps) and what props are going to be used to\nresolve the className (styleProps).\n\nThe classNameResolver will only get what you defined in extractStyleProps as\nstyleProps and you may use that to form your final className to get the correct\nstyles.\n\nSometimes you would want not to modify the className but the style prop, this is\nto apply change control via css vars; for those cases we provide a styleResolver\nfunction.\n\n\n\n\n\nIn any case, you can use the Button component like this:\n\n\n\n\nExample with tailwindVariants and Rambda#\n\n\n\nThen you can use your shiny button like this\n\n\n\nWhy would I want a button that is a link? Well, because sometimes you need the\nstyles of a button in an anchor tag.\n\n\nCreating a only polymorphic component#\n\nBut if you do not want to create a custom className resolver and only need a\npolymorphic component you can use createReactMetaComponent\n\n\nCreating a component that extracts some props to create the className#\n\nBut this time it is not a polymorphic component, you can use\ncreateComponentWithStyleProps and the component is not going to have an as prop.\n\n\n\nThis component is always going to be a button.\n\n\nFinal words#\n\nObviously you may use directly a classname resolver of your liking directly in\nany component directly in the code like this (suppose we were using\ntailwindVariants):\n\n\n\nAnd it is really good, but we wanted to give some structure to react components\nto make them have all your variants by props.\n\nIf you read the article about our ideas that came from our adventures in the\nplace where we study, you may know we are planning on using a compiler to make\nsome optimizations at build time.\n\nAnd since react is something that is going to be in our projects, we wanted to\nmake the first step in this direction.","routePath":"/dyestheticsLabGHPages/guide/component-creators","lang":"","toc":[{"text":"What does it do?","id":"what-does-it-do","depth":2,"charIndex":3},{"text":"Installation","id":"installation","depth":2,"charIndex":1076},{"text":"Usage","id":"usage","depth":2,"charIndex":1092},{"text":"Creating a styled component","id":"creating-a-styled-component","depth":2,"charIndex":1101},{"text":"Example with tailwindVariants and Rambda","id":"example-with-tailwindvariants-and-rambda","depth":3,"charIndex":1845},{"text":"Creating a only polymorphic component","id":"creating-a-only-polymorphic-component","depth":2,"charIndex":2056},{"text":"Creating a component that extracts some props to create the className","id":"creating-a-component-that-extracts-some-props-to-create-the-classname","depth":2,"charIndex":2234},{"text":"Final words","id":"final-words","depth":2,"charIndex":2500}],"domain":"","frontmatter":{},"version":""},{"id":1,"title":"Introduction","content":"#\n\nWe are creating several libraries to help us create design systems specially for\nReact.js. It is going to be a long road ahead of us.\n\nThis idea was born when in a university project we were asked to complain to\nseveral constraints because we asked for a challenge.\n\nBy now we know that there are out there magnificent tools that are evolving fast\nand offer a really good DX, decent performance and portability but they did not\ncovered 100% of what we were asked for, like:\n\n * Short build times\n * No runtime overhead\n * 90% of css coverage\n * To work with RSC and get the styles inf in runtime (SSR)\n * Good JSX DX\n\n\nProjects that inspire us#\n\nWhile searching for some tools to help us with our project we found some really\ngood libraries that we used as inspiration or even we build our tools around\nthem, we really thank the open source community for your incredible work:\n\n * Radix\n\n * Tamagui\n\n * Stitches\n\n * Mantine\n\n * UnoCSS\n\n * Tailwind\n\n * Tailwind Variants\n\n\nSome context...#\n\nFor instance, we wanted to use some css variant generator, because you actually\ndo not know what variants you are going to need in compile time, all the classes\nrepresenting possible states of that variant were generated and the coverage of\nused css was not accepted by our mentors.\n\nThen we came upon Tamagui, which was wonderful because it offered optimizations\nreading the jsx and extracting the variants and creating a css file with only\nthe classes that were used. We love Tamagui.\n\nBut then, we needed to use the components as RSC and also the styles were not\nknown for those RSC ahead of time, since we were fetching that info from a\nremote data source (we were doing SSR).\n\nAnd the heuristics to know how to compile a component were going to be lost\nsince we do not know which variant value to apply till we are on runtime.\n\nThat is why we are building some tolls to help us build up, with luck, a\ncomplete framework that can address all the constraints we are facing.\n\nIn that context we actually do not aspire to be a replacement of those very\npowerful libraries, we are just experimenting with some ideas\n\n\nThe road ahead#\n\nAs for now we are building a library of react component creators and around that\na tailwind wrapper using tailwind variants (we love tailwind variants)\n\nTo make up for the missing responsive variants we are creating a babel loader\nand a vite plugin to create the responsive variants in compile time (all of\nthem).\n\nAs for the next steps we are looking to create a SWC plugin to extract only the\nneeded classes from from JSX syntax and transform them in optimized components\nwith only the needed tailwind classes.\n\nStill the component creator will help us in dev mode meanwhile we are learning\nenough rust to create the plugin.\n\nAs for the the RSC that hav a data source in runtime, we want to create a set of\nNEXt.js utilities to help us register the needed classes when building in SSG\nmode and use that resolved values to create only the needed classes in CSS file\nand also to inline the critical CSS.\n\nWe know that for client components it is kind of different so we are thinking in\nsome way to extract the classes that are going to be passed to the client\ncomponent from the server component, kind of a proxy.\n\nThis approaches will need a strong set of rules and conventions the we need to\neffectively communicate towards warnings and linter rules.\n\nAs you can see there is a lot of work to do and we are just starting.\n\n\nWhat we have so far#\n\nWe have several packages but the three most usable are:\n\n** @dyesthetics-lab/react-component-creators ** This is our base to create\npolymorphic components with styles and variants\n\n * @dyesthetics-lab/react-tv-variants-creators This is a wrapper around tailwind\n   variants and @dyesthetics-lab/react-component-creators to create responsive\n   variants, but be careful, this does not work alone\n\n * @dyesthetics-lab/tailwind-manifest-creators To effectively create the\n   responsive variants we need to create a manifest with all the responsive\n   variants to make tailwindcss read it to generate the needed CSS, In this\n   module we have loaders and plugins to helps us do so. (We are planning to\n   offer you a codegen cli also to give you an alternative to this package)\n\nYou can test out our following libraries\n\n * @dyesthetics-lab/react-component-creators\n * @dyesthetics-lab/react-tv-variants-creators\n * @dyesthetics-lab/tailwind-utils\n * @dyesthetics-lab/tailwind-manifest-creators\n * @dyesthetics-lab/tailwind-utils\n\n\nCan I help out?#\n\nOf course! We are looking for contributors to help us out with the project. We\nwant to learn, but this days we are really busy with the university so be\npatient with if you do not have an answer right away, nevertheless any pr from a\nfork is going to be reviewed in the same week you it is sent.\n\n\nFinal words#\n\nWe are here to learn, we really appreciate any feedback you can give us.\n\nAlso we have an article that ignited the idea of this project, bu created the\nlibraries in the spur of the moment right after the article was published.","routePath":"/dyestheticsLabGHPages/guide/","lang":"","toc":[{"text":"Projects that inspire us","id":"projects-that-inspire-us","depth":2,"charIndex":621},{"text":"Some context...","id":"some-context","depth":2,"charIndex":974},{"text":"The road ahead","id":"the-road-ahead","depth":2,"charIndex":2110},{"text":"What we have so far","id":"what-we-have-so-far","depth":2,"charIndex":3453},{"text":"Can I help out?","id":"can-i-help-out","depth":2,"charIndex":4503},{"text":"Final words","id":"final-words","depth":2,"charIndex":4819}],"domain":"","frontmatter":{},"version":""},{"id":2,"title":"Tailwind Manifest Creators","content":"#\n\n\nIntroduction#\n\nThe @dyesthetics-lab/tailwind-manifest-creators package creates manifest files\ncontaining all Tailwind CSS class variants used in your project. A manifest file\nis a collection of all the Tailwind classes that your application might use,\nwhich are extracted from your configuration files. This manifest enables\nTailwind to efficiently process only the classes your application actually\nneeds, improving build performance and reducing CSS bundle size.\n\nWARNING\n\nThis package is specifically designed to work with Tailwind CSS v4, which\nintroduced the @source directive for improved class extraction.\n\n\nInstallation#\n\n\nUsage#\n\n\nManifest Creator#\n\nThe package exports a createManifest function that generates a manifest file\ncontaining all Tailwind class variants that match a specified glob pattern.\n\nTo implement this in your build process, create a pre-build script file (e.g.,\npre-build.ts):\n\n\n\nThe globPath parameter specifies which files to scan for Tailwind class\ndefinitions. In this example, we're searching for all files with the\n.tailwindConfig.json extension.\n\n\nConfiguration Files#\n\nYour project should contain one or more configuration files matching the\nspecified glob pattern. These files define the Tailwind variants your components\nuse.\n\nExample tailwindConfig.json:\n\n\n\nINFO\n\nNote that the responsiveVariants option in your configuration controls whether\nresponsive variants are generated. When set to true, the manifest will include\nresponsive variants (like sm:, md:, lg:) for your classes. The tool does not\nautomatically create responsive variants - it generates them based on your\nconfiguration.\n\n\nIntegrating with Your Build Process#\n\nConfigure the pre-build script in your package.json:\n\n\n\nWhen you run your build process, the pre-build script will execute first,\ncreating a global.tailwind.manifest file in node_modules/.tailwind-manifests/.\nThis manifest will contain all Tailwind classes found in your configuration\nfiles, including responsive variants if specified.\n\nExample manifest content:\n\n\n\n\nConfiguring Tailwind CSS#\n\nTo tell Tailwind CSS where to find the manifest file, add this directive to your\ncss entry point:\n\n\n\n\nCustomizing the Target Path#\n\nYou can customize where the manifest file is created:\n\n\n\nIf you customize the target path, make sure to update the path in your css entry\npoint:\n\n\n\n\nIntegration Plugins#\n\nThe package provides build tool plugins to simplify the integration process.\n\n\nVite Plugin#\n\nConfigure the plugin in your vite.config.ts:\n\n\n\nThen add the source directive to your css entry point:\n\n\n\n\nWebpack Plugin#\n\nFor Next.js projects, configure the plugin in your next.config.js:\n\n\n\nThen add the source directive to your css entry point:\n\n\n\nThis approach allows Tailwind to access all the necessary class variants without\nhaving to scan your entire codebase, improving build performance and ensuring\nall dynamically generated classes are properly included in your CSS output.","routePath":"/dyestheticsLabGHPages/guide/tailwind-manifest-creators","lang":"","toc":[{"text":"Introduction","id":"introduction","depth":2,"charIndex":3},{"text":"Installation","id":"installation","depth":2,"charIndex":618},{"text":"Usage","id":"usage","depth":2,"charIndex":634},{"text":"Manifest Creator","id":"manifest-creator","depth":3,"charIndex":643},{"text":"Configuration Files","id":"configuration-files","depth":3,"charIndex":1088},{"text":"Integrating with Your Build Process","id":"integrating-with-your-build-process","depth":3,"charIndex":1635},{"text":"Configuring Tailwind CSS","id":"configuring-tailwind-css","depth":3,"charIndex":2040},{"text":"Customizing the Target Path","id":"customizing-the-target-path","depth":3,"charIndex":2169},{"text":"Integration Plugins","id":"integration-plugins","depth":2,"charIndex":2348},{"text":"Vite Plugin","id":"vite-plugin","depth":3,"charIndex":2449},{"text":"Webpack Plugin","id":"webpack-plugin","depth":3,"charIndex":2570}],"domain":"","frontmatter":{},"version":""}]